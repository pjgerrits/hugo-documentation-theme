install.packages('xfun')
install.packages("xfun")
install.packages("xfun")
install.packages('rtools')
install.packages("Rtools")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
library(xfun)
install.packages(c("backports", "fs", "glue", "readr", "stringi", "terra", "vroom", "xfun", "xml2"))
install.packages(c("backports", "fs", "glue", "readr", "stringi", "terra", "vroom", "xfun", "xml2"))
install.packages(c("backports", "fs", "glue", "readr", "stringi", "terra", "vroom", "xfun", "xml2"))
install.packages(c("backports", "fs", "glue", "readr", "stringi", "terra", "vroom", "xfun", "xml2"))
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
blogdown:::serve_site()
library(xfun)
remove.packages("xfun")
install.packages("xfun")
install.packages("xfun")
library(xfun)
blogdown:::serve_site()
blogdown:::new_post_addin()
1
blogdown:::serve_site()
library(DBI)
con<-dbConnect(RPostgres::Postgres())
db <- 'urbanoccupations_db'  #provide the name of your db
host_db <- 'aws-eu-central-1-portal.1.dblayer.com' #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '18368'  # or any other port specified by the DBA
db_user <- admin
db_password <- 'FIDCZEIMGKNBPUIQ'
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
db_user <- 'admin'
db_password <- 'FIDCZEIMGKNBPUIQ'
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
dbListTables(con)
dbGetRowCount(Crosstab_Settlements_CombinedYears3_Location)
dbGetRowCount('Crosstab_Settlements_CombinedYears3_Location')
dbGetRowCount("Crosstab_Settlements_CombinedYears3_Location")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
leaflet() %>%
addTiles %>% # Add default OpenStreetMap map tiles
setView(lng = 5.0, lat = 51.0, zoom = 6)
blogdown:::serve_site()
blogdown:::serve_site()
evtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
install.packages('evtools')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tmap)
library(geojsonio)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tmap)
library(geojsonio)
knitr::opts_chunk$set(echo = TRUE)
# library(tidyverse)
# library(tmap)
# library(geojsonio)
# library(plotly)
# library(rgdal)
# library(broom)
# library(mapview)
# library(crosstalk)
# library(sf)
# library(sp)
# library(spdep)
# library(car)
# library(fs)
# library(janitor)
install.packages('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor')
install.packages('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor')
install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
install.packages(c("geojsonio", "broom", "mapview", "crosstalk", "spdep", "car", "fs", "janitor"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
install.packages('plotly')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",
destfile="prac9_data/statistical-gis-boundaries-london.zip")
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",
destfile="prac9_data/statistical-gis-boundaries-london.zip")
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",  destfile="prac9_data/statistical-gis-boundaries-london.zip")
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",  destfile="statistical-gis-boundaries-london.zip")
list.dirs("statistical-gis-boundaries-london")
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",  destfile="statistical-gis-boundaries-london.zip")
#unzip it
unzip("statistical-gis-boundaries-london.zip", exdir="prac9_data")
list.dirs("statistical-gis-boundaries-london")
list.dirs("prac9_data/statistical-gis-boundaries-london")
LondonWardsss <- readOGR("prac9_data/statistical-gis-boundaries-london/ESRI/London_Ward_CityMerged.shp",
layer="London_Ward_CityMerged")
#convert it to a simple features object
LondonWardsssSF <- st_as_sf(LondonWardsss)
#check coordinate reference system
LondonWardsssSF
BNG = "+init=epsg:27700"
LondonWardsssSFBNG <- st_transform(LondonWardsssSF, BNG)
#check the data
qtm(LondonWardsssSFBNG)
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", col_names = TRUE, locale = locale(encoding = 'Latin1'))
str(LondonWardProfiles)
#We can use readr to deal with the issues in this dataset - which are to do with text values being stored in columns containing numeric values
#read in some data - couple of things here. Read in specifying a load of likely 'n/a' values, also specify Latin1 as encoding as there is a pound sign (Â£) in one of the column headers - just to make things fun!
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", na = c("", "NA", "n/a"), locale = locale(encoding = 'Latin1'), col_names = TRUE)
str(LondonWardProfiles)
str(LondonWardProfiles)
str(LondonWardProfiles)
str(LondonWardProfiles)
#merge boundaries and data
LonWardProfiles <- left_join(LondonWardsssSFBNG,
LondonWardProfiles,
by = c("GSS_CODE" = "New code"))
#merge boundaries and data
LonWardProfiles <- left_join(LondonWardsssSFBNG,
LondonWardProfiles,
by = c("GSS_CODE" = "New code"))
#let's map our dependent variable to see if the join has worked:
tmap_mode("view")
qtm(LonWardProfiles,
fill = "Average GCSE capped point scores - 2014",
borders = NULL)
#might be a good idea to see where the secondary schools are in London too
london_schools <- read_csv("https://data.london.gov.uk/download/london-schools-atlas/57046151-39a0-45d9-8dc0-27ea7fd02de8/all_schools_xy_2016.csv")
#from the coordinate values stored in the x and y columns, which look like they are latitude and longitude values, create a new points dataset
lon_schools_sf <- st_as_sf(london_schools,
coords = c("x","y"),
crs = 4326)
#now pull out the secondary schools
#these are the same - one uses grep() and one uses the stringr() package
lond_sec_schools_sf <- lon_schools_sf[str_which(lon_schools_sf[["PHASE"]],"Secondary"),]
lond_sec_schools_sf <- lon_schools_sf[grep("Secondary",lon_schools_sf[["PHASE"]]),]
tmap_mode("view")
qtm(lond_sec_schools_sf)
q <- qplot(x = `Unauthorised Absence in All Schools (%) - 2013`,
y = `Average GCSE capped point scores - 2014`,
data=LonWardProfiles)
#plot with a regression line - note, I've added some jitter here as the x-scale is rounded
q + stat_smooth(method="lm", se=FALSE, size=1) +
geom_jitter()
#run the linear regression model and store its outputs in an object called model1
model1 <- lm(`Average GCSE capped point scores - 2014` ~ `Unauthorised Absence in All Schools (%) - 2013`,
data = LonWardProfiles)
#show the summary of those outputs
summary(model1)
blogdown:::serve_site()
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
knitr::opts_chunk$set(echo = TRUE)
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
source("~/GitHub/hugo-documentation-theme/content/docs/Edirne/gwr-test.Rmarkdown", encoding = 'UTF-8')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",  destfile="statistical-gis-boundaries-london.zip")
#unzip it
unzip("statistical-gis-boundaries-london.zip", exdir="prac9_data")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(tidyverse)
library(tmap)
library(geojsonio)
library(plotly)
library(rgdal)
library(broom)
library(mapview)
library(crosstalk)
library(sf)
library(sp)
library(spdep)
library(car)
library(fs)
library(janitor)
# install.packages(c('geojsonio', 'broom', 'mapview', 'crosstalk', 'spdep', 'car', 'fs', 'janitor'))
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",  destfile="statistical-gis-boundaries-london.zip")
#unzip it
unzip("statistical-gis-boundaries-london.zip", exdir="prac9_data")
list.dirs("prac9_data/statistical-gis-boundaries-london")
LondonWardsss <- readOGR("prac9_data/statistical-gis-boundaries-london/ESRI/London_Ward_CityMerged.shp",
layer="London_Ward_CityMerged")
#convert it to a simple features object
LondonWardsssSF <- st_as_sf(LondonWardsss)
#check coordinate reference system
LondonWardsssSF
BNG = "+init=epsg:27700"
LondonWardsssSFBNG <- st_transform(LondonWardsssSF, BNG)
#check the data
qtm(LondonWardsssSFBNG)
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", col_names = TRUE, locale = locale(encoding = 'Latin1'))
str(LondonWardProfiles)
#We can use readr to deal with the issues in this dataset - which are to do with text values being stored in columns containing numeric values
#read in some data - couple of things here. Read in specifying a load of likely 'n/a' values, also specify Latin1 as encoding as there is a pound sign (Â£) in one of the column headers - just to make things fun!
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", na = c("", "NA", "n/a"), locale = locale(encoding = 'Latin1'), col_names = TRUE)
#We can use readr to deal with the issues in this dataset - which are to do with text values being stored in columns containing numeric values
#read in some data - couple of things here. Read in specifying a load of likely 'n/a' values, also specify Latin1 as encoding as there is a pound sign (Â£) in one of the column headers - just to make things fun!
LondonWardProfiles <- read_csv("https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv", na = c("", "NA", "n/a"), locale = locale(encoding = 'Latin1'), col_names = TRUE)
#merge boundaries and data
LonWardProfiles <- left_join(LondonWardsssSFBNG,
LondonWardProfiles,
by = c("GSS_CODE" = "New code"))
#merge boundaries and data
LonWardProfiles <- left_join(LondonWardsssSFBNG,
LondonWardProfiles,
by = c("GSS_CODE" = "New code"))
#merge boundaries and data
LonWardProfiles <- left_join(LondonWardsssSFBNG,
LondonWardProfiles,
by = c("GSS_CODE" = "New code"))
#let's map our dependent variable to see if the join has worked:
tmap_mode("view")
qtm(LonWardProfiles,
fill = "Average GCSE capped point scores - 2014",
borders = NULL)
knitr::opts_chunk$set(echo = FALSE)
download.file("https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip",  destfile="statistical-gis-boundaries-london.zip")
#unzip it
unzip("statistical-gis-boundaries-london.zip", exdir="prac9_data")
library(DBI)
library(sf)
library(leaflet)
library(ggplot2)
library(tmap)
library(dplyr)
library(nngeo)
library(DBI)
db <- 'urbanoccupations_db'  #provide the name of your db
host_db <- 'aws-eu-central-1-portal.1.dblayer.com' #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- '18368'  # or any other port specified by the DBA
db_u <- 'online_user'
db_p <- 'Peculiar-Crazy9-Trailing'
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_u, password=db_p)
file_motor = dbGetQuery(con, "select * from piet_phd_data.DH_1940_Edirne_Transport WHERE network_ty IN ('Ausgebaute Allwetterstrasse', 'Fahrstrasse')")
newGeom = st_as_sfc(structure(as.character(file_motor$geom), class = "WKB"),EWKB=TRUE)
file_motor_geom = st_set_geometry(file_motor, newGeom)
# plot(file_motor_geom$geometry)
map_motor = ggplot(file_motor_geom) + geom_sf()
map_motor
