result1 <- data.table(cn = names(result1), transpose(result1))
# result2 <-st_distance(file_settlements_geom, file_cart_geom)
# result3 <-st_distance(file_settlements_geom, file_walk_geom)
# st_nearest_points(file_motor_geom, file_settlements_geom)
# l_table33 <- transpose(as.data.table(result1))
# l_table_min <- apply(l_table33$x,2,min)
# l_min <- as.data.table(l_table_min)
# l_min
# l = st_connect(file_settlements_geom, file_motor_geom, ids = result1, progress = FALSE)
# m = st_connect(file_settlements_geom, file_cart_geom, ids = result2, progress = FALSE)
# n = st_connect(file_settlements_geom, file_walk_geom, ids = result3, progress = FALSE)
# plot(l, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_motor_geom), col = "red", add = TRUE)
# plot(l, add = TRUE)
# plot(m, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_cart_geom), col = "red", add = TRUE)
# plot(m, add = TRUE)
# plot(n, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_walk_geom), col = "red", add = TRUE)
# plot(n, add = TRUE)
View(result1)
library(data.table)
library(sf)
result1 <- as.data.table(st_distance(file_settlements_geom, file_motor_geom))
result1 %>% # take the data.table
summarise_all(funs(min)) %>% # get the sum of each column
# result1 <- data.table(cn = names(result1), transpose(result1))
# result2 <-st_distance(file_settlements_geom, file_cart_geom)
# result3 <-st_distance(file_settlements_geom, file_walk_geom)
# st_nearest_points(file_motor_geom, file_settlements_geom)
# l_table33 <- transpose(as.data.table(result1))
# l_table_min <- apply(l_table33$x,2,min)
# l_min <- as.data.table(l_table_min)
# l_min
# l = st_connect(file_settlements_geom, file_motor_geom, ids = result1, progress = FALSE)
# m = st_connect(file_settlements_geom, file_cart_geom, ids = result2, progress = FALSE)
# n = st_connect(file_settlements_geom, file_walk_geom, ids = result3, progress = FALSE)
# plot(l, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_motor_geom), col = "red", add = TRUE)
# plot(l, add = TRUE)
# plot(m, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_cart_geom), col = "red", add = TRUE)
# plot(m, add = TRUE)
# plot(n, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_walk_geom), col = "red", add = TRUE)
# plot(n, add = TRUE)
library(data.table)
library(sf)
result1 <- as.data.table(st_distance(file_settlements_geom, file_motor_geom))
result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
# result1 <- data.table(cn = names(result1), transpose(result1))
# result2 <-st_distance(file_settlements_geom, file_cart_geom)
# result3 <-st_distance(file_settlements_geom, file_walk_geom)
# st_nearest_points(file_motor_geom, file_settlements_geom)
# l_table33 <- transpose(as.data.table(result1))
# l_table_min <- apply(l_table33$x,2,min)
# l_min <- as.data.table(l_table_min)
# l_min
# l = st_connect(file_settlements_geom, file_motor_geom, ids = result1, progress = FALSE)
# m = st_connect(file_settlements_geom, file_cart_geom, ids = result2, progress = FALSE)
# n = st_connect(file_settlements_geom, file_walk_geom, ids = result3, progress = FALSE)
# plot(l, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_motor_geom), col = "red", add = TRUE)
# plot(l, add = TRUE)
# plot(m, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_cart_geom), col = "red", add = TRUE)
# plot(m, add = TRUE)
# plot(n, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_walk_geom), col = "red", add = TRUE)
# plot(n, add = TRUE)
View(result1)
library(data.table)
library(sf)
result1 <- as.data.table(st_distance(file_settlements_geom, file_motor_geom))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
# result1 <- data.table(cn = names(result1), transpose(result1))
# result2 <-st_distance(file_settlements_geom, file_cart_geom)
# result3 <-st_distance(file_settlements_geom, file_walk_geom)
# st_nearest_points(file_motor_geom, file_settlements_geom)
# l_table33 <- transpose(as.data.table(result1))
# l_table_min <- apply(l_table33$x,2,min)
# l_min <- as.data.table(l_table_min)
# l_min
# l = st_connect(file_settlements_geom, file_motor_geom, ids = result1, progress = FALSE)
# m = st_connect(file_settlements_geom, file_cart_geom, ids = result2, progress = FALSE)
# n = st_connect(file_settlements_geom, file_walk_geom, ids = result3, progress = FALSE)
# plot(l, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_motor_geom), col = "red", add = TRUE)
# plot(l, add = TRUE)
# plot(m, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_cart_geom), col = "red", add = TRUE)
# plot(m, add = TRUE)
# plot(n, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_walk_geom), col = "red", add = TRUE)
# plot(n, add = TRUE)
View(text_x)
library(data.table)
library(sf)
result1 <- as.data.table(st_distance(file_settlements_geom, file_motor_geom))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
text_x2 <- transpose(test_x)
library(data.table)
library(sf)
result1 <- as.data.table(st_distance(file_settlements_geom, file_motor_geom))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
text_x2 <- transpose(as.data.table(test_x))
library(data.table)
library(sf)
result1 <- as.data.table(st_distance(file_settlements_geom, file_motor_geom))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
text_x2 <- transpose(text_x)
# result1 <- data.table(cn = names(result1), transpose(result1))
# result2 <-st_distance(file_settlements_geom, file_cart_geom)
# result3 <-st_distance(file_settlements_geom, file_walk_geom)
# st_nearest_points(file_motor_geom, file_settlements_geom)
# l_table33 <- transpose(as.data.table(result1))
# l_table_min <- apply(l_table33$x,2,min)
# l_min <- as.data.table(l_table_min)
# l_min
# l = st_connect(file_settlements_geom, file_motor_geom, ids = result1, progress = FALSE)
# m = st_connect(file_settlements_geom, file_cart_geom, ids = result2, progress = FALSE)
# n = st_connect(file_settlements_geom, file_walk_geom, ids = result3, progress = FALSE)
# plot(l, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_motor_geom), col = "red", add = TRUE)
# plot(l, add = TRUE)
# plot(m, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_cart_geom), col = "red", add = TRUE)
# plot(m, add = TRUE)
# plot(n, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_walk_geom), col = "red", add = TRUE)
# plot(n, add = TRUE)
View(text_x2)
View(text_x)
library(data.table)
library(sf)
result1 <- st_distance(file_settlements_geom, file_motor_geom)
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
library(data.table)
library(sf)
result1 <- transpose(as.data.table(st_distance(file_settlements_geom, file_motor_geom)))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
library(data.table)
library(sf)
result1 <- transpose(as.data.matrix(st_distance(file_settlements_geom, file_motor_geom)))
library(data.table)
library(matrix)
install.packages("matrix")
install.packages("Matrix")
library(data.table)
library(matrix)
library(data.table)
library(Matrix)
library(sf)
result1 <- transpose(as.matrix(st_distance(file_settlements_geom, file_motor_geom)))
library(data.table)
library(Matrix)
library(sf)
result1 <- transpose(st_distance(file_settlements_geom, file_motor_geom))
library(data.table)
library(Matrix)
library(sf)
result1 <- as.matrix(st_distance(file_settlements_geom, file_motor_geom)))
library(data.table)
library(Matrix)
library(sf)
result1 <- as.matrix(st_distance(file_settlements_geom, file_motor_geom))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
library(data.table)
library(Matrix)
library(sf)
result1 <- as.data.table(as.matrix(st_distance(file_settlements_geom, file_motor_geom)))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
text_x2 <- transpose(text_x)
# result1 <- data.table(cn = names(result1), transpose(result1))
# result2 <-st_distance(file_settlements_geom, file_cart_geom)
# result3 <-st_distance(file_settlements_geom, file_walk_geom)
# st_nearest_points(file_motor_geom, file_settlements_geom)
# l_table33 <- transpose(as.data.table(result1))
# l_table_min <- apply(l_table33$x,2,min)
# l_min <- as.data.table(l_table_min)
# l_min
# l = st_connect(file_settlements_geom, file_motor_geom, ids = result1, progress = FALSE)
# m = st_connect(file_settlements_geom, file_cart_geom, ids = result2, progress = FALSE)
# n = st_connect(file_settlements_geom, file_walk_geom, ids = result3, progress = FALSE)
# plot(l, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_motor_geom), col = "red", add = TRUE)
# plot(l, add = TRUE)
# plot(m, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_cart_geom), col = "red", add = TRUE)
# plot(m, add = TRUE)
# plot(n, col = NA)  # For setting the extent
# plot(st_geometry(file_settlements_geom), col = "darkgrey", add = TRUE)
# plot(st_geometry(file_walk_geom), col = "red", add = TRUE)
# plot(n, add = TRUE)
View(result1)
library(data.table)
library(Matrix)
library(sf)
result1 <- transpose(as.data.table(as.matrix(st_distance(file_settlements_geom, file_motor_geom))))
text_x <- result1 %>% # take the data.table
summarise_all(funs(min))# get the sum of each column
library(data.table)
result1_dist2 <- st_distance(file_settlements_geom, file_motor_geom)
df_t <- as.data.table(result1_dist2)
df_t2 <- transpose(df_t)
result1 <- rbindlist(df_t)
library(data.table)
result1_dist2 <- matrix(st_distance(file_settlements_geom, file_motor_geom))
# df_t <- as.data.table(result1_dist2)
# df_t2 <- transpose(df_t)
# result1 <- rbindlist(df_t)
# result1_dist_table <- transpose(as.data.table(st_distance(file_settlements_geom, file_motor_geom)))
# result1_unlist <- unlist(result1_dist_table)
# result1_dist_table_transpose <- as.data.frame(result1_dist_table)
# result1_trans <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# # calculate distance to nearest road for each road category
# result1 <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# result2 <-transpose(as.data.table(st_distance(file_settlements_geom, file_cart_geom)))
# result3 <-transpose(as.data.table(st_distance(file_settlements_geom, file_walk_geom)))
# # filter the nearest distance of each road category
result1_min <- apply(result1_dist2,1, FUN = min)
# result2_min <- apply(result2,2,min)
# result3_min <- apply(result3,2,min)
# # visualise distance output as table.
result1_min_table <- as.data.table(result1_min)
# result2_min_table <- as.data.table(result2_min)
# result3_min_table <- as.data.table(result3_min)
# #rename near column to for the nearest road in M distance
# names(result1_min_table)[names(result1_min_table) == "result1_min"] <- "nearest_road_m"
# names(result2_min_table)[names(result2_min_table) == "result2_min"] <- "nearest_road_m"
# names(result3_min_table)[names(result3_min_table) == "result3_min"] <- "nearest_road_m"
# # calculate row number per table
# result1_min_table$row_num <- seq.int(nrow(result1_min_table))
# result2_min_table$row_num <- seq.int(nrow(result2_min_table))
# result3_min_table$row_num <- seq.int(nrow(result3_min_table))
# # visualise result
# result1_min_table
# result2_min_table
# result3_min_table
View(result1_min_table)
View(result1_dist2)
library(data.table)
result1_dist2 <- st_distance(file_settlements_geom, file_motor_geom)
# df_t <- as.data.table(result1_dist2)
# df_t2 <- transpose(df_t)
# result1 <- rbindlist(df_t)
# result1_dist_table <- transpose(as.data.table(st_distance(file_settlements_geom, file_motor_geom)))
# result1_unlist <- unlist(result1_dist_table)
# result1_dist_table_transpose <- as.data.frame(result1_dist_table)
# result1_trans <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# # calculate distance to nearest road for each road category
# result1 <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# result2 <-transpose(as.data.table(st_distance(file_settlements_geom, file_cart_geom)))
# result3 <-transpose(as.data.table(st_distance(file_settlements_geom, file_walk_geom)))
# # filter the nearest distance of each road category
result1_min <- apply(result1_dist2,1, FUN = min)
# result2_min <- apply(result2,2,min)
# result3_min <- apply(result3,2,min)
# # visualise distance output as table.
result1_min_table <- as.data.table(result1_min)
# result2_min_table <- as.data.table(result2_min)
# result3_min_table <- as.data.table(result3_min)
# #rename near column to for the nearest road in M distance
# names(result1_min_table)[names(result1_min_table) == "result1_min"] <- "nearest_road_m"
# names(result2_min_table)[names(result2_min_table) == "result2_min"] <- "nearest_road_m"
# names(result3_min_table)[names(result3_min_table) == "result3_min"] <- "nearest_road_m"
# # calculate row number per table
# result1_min_table$row_num <- seq.int(nrow(result1_min_table))
# result2_min_table$row_num <- seq.int(nrow(result2_min_table))
# result3_min_table$row_num <- seq.int(nrow(result3_min_table))
# # visualise result
# result1_min_table
# result2_min_table
# result3_min_table
View(result1_min_table)
library(data.table)
result1_dist2 <- st_distance(file_settlements_geom, file_motor_geom)
# df_t <- as.data.table(result1_dist2)
# df_t2 <- transpose(df_t)
# result1 <- rbindlist(df_t)
# result1_dist_table <- transpose(as.data.table(st_distance(file_settlements_geom, file_motor_geom)))
# result1_unlist <- unlist(result1_dist_table)
# result1_dist_table_transpose <- as.data.frame(result1_dist_table)
# result1_trans <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# # calculate distance to nearest road for each road category
# result1 <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# result2 <-transpose(as.data.table(st_distance(file_settlements_geom, file_cart_geom)))
# result3 <-transpose(as.data.table(st_distance(file_settlements_geom, file_walk_geom)))
# # filter the nearest distance of each road category
result1_min <- apply(result1_dist2,1, FUN = min)
# result2_min <- apply(result2,2,min)
# result3_min <- apply(result3,2,min)
# # visualise distance output as table.
result1_min_table <- as.data.table(result1_min)
# result2_min_table <- as.data.table(result2_min)
# result3_min_table <- as.data.table(result3_min)
# #rename near column to for the nearest road in M distance
# names(result1_min_table)[names(result1_min_table) == "result1_min"] <- "nearest_road_m"
# names(result2_min_table)[names(result2_min_table) == "result2_min"] <- "nearest_road_m"
# names(result3_min_table)[names(result3_min_table) == "result3_min"] <- "nearest_road_m"
# # calculate row number per table
result1_min_table$row_num <- seq.int(nrow(result1_min_table))
# result2_min_table$row_num <- seq.int(nrow(result2_min_table))
# result3_min_table$row_num <- seq.int(nrow(result3_min_table))
# # visualise result
result1_min_table
# result2_min_table
# result3_min_table
# join the nearest distance with the settlement layer and plot for result1 (motorways)
file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
join_table_distance_l <- inner_join(file_settlements_geom, result1_min_table[ , c("nearest_road_m", "row_num")])
library(data.table)
result1_dist2 <- st_distance(file_settlements_geom, file_motor_geom)
# df_t <- as.data.table(result1_dist2)
# df_t2 <- transpose(df_t)
# result1 <- rbindlist(df_t)
# result1_dist_table <- transpose(as.data.table(st_distance(file_settlements_geom, file_motor_geom)))
# result1_unlist <- unlist(result1_dist_table)
# result1_dist_table_transpose <- as.data.frame(result1_dist_table)
# result1_trans <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# # calculate distance to nearest road for each road category
# result1 <-transpose(as.data.frame(st_distance(file_settlements_geom, file_motor_geom)))
# result2 <-transpose(as.data.table(st_distance(file_settlements_geom, file_cart_geom)))
# result3 <-transpose(as.data.table(st_distance(file_settlements_geom, file_walk_geom)))
# # filter the nearest distance of each road category
result1_min <- apply(result1_dist2,1, FUN = min)
# result2_min <- apply(result2,2,min)
# result3_min <- apply(result3,2,min)
# # visualise distance output as table.
result1_min_table <- as.data.table(result1_min)
# result2_min_table <- as.data.table(result2_min)
# result3_min_table <- as.data.table(result3_min)
# #rename near column to for the nearest road in M distance
names(result1_min_table)[names(result1_min_table) == "result1_min"] <- "nearest_road_m"
# names(result2_min_table)[names(result2_min_table) == "result2_min"] <- "nearest_road_m"
# names(result3_min_table)[names(result3_min_table) == "result3_min"] <- "nearest_road_m"
# # calculate row number per table
result1_min_table$row_num <- seq.int(nrow(result1_min_table))
# result2_min_table$row_num <- seq.int(nrow(result2_min_table))
# result3_min_table$row_num <- seq.int(nrow(result3_min_table))
# # visualise result
result1_min_table
# result2_min_table
# result3_min_table
# join the nearest distance with the settlement layer and plot for result1 (motorways)
file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
join_table_distance_l <- inner_join(file_settlements_geom, result1_min_table[ , c("nearest_road_m", "row_num")])
plot(join_table_distance_l$both, join_table_distance_l$nearest_road_m)
# # join the nearest distance values with the settlement layer and plot for result2 (cart roads)
# file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
# join_table_distance_2 <- inner_join(file_settlements_geom, result2_min_table[ , c("nearest_road_m", "row_num")])
# plot(join_table_distance_2$both, join_table_distance_2$nearest_road_m)
# # join the nearest distance values with the settlement layer and plot for result3 (walking paths)
# file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
# join_table_distance_3 <- inner_join(file_settlements_geom, result3_min_table[ , c("nearest_road_m", "row_num")])
# plot(join_table_distance_3$both, join_table_distance_3$nearest_road_m)
# calculate regression for result1 (motorways)
model1 <- lm(both ~ nearest_road_m, data = join_table_distance_l)
summary(model1)
# # calculate regression for result2 (cart roads)
# model2 <- lm(both ~ nearest_road_m, data = join_table_distance_2)
# summary(model2)
# # calculate regression for result3 (walking paths)
# model3 <- lm(both ~ nearest_road_m, data = join_table_distance_3)
# summary(model3)
# ggplot(data = join_table_distance_l,aes(x.both, y.nearest_road_m)) +
#   stat_summary(fun.data=mean_cl_normal) +
#   geom_smooth(method='lm', formula= y~x)
# read dataset
# df = join_table_distance_l
# Create the model
fit1 <- lm(join_table_distance_l$nearest_road_m ~ join_table_distance_l$both, data=join_table_distance_l)
fit2 <- lm(join_table_distance_2$nearest_road_m ~ join_table_distance_2$both, data=join_table_distance_2)
# # calculate distance to nearest road for each road category
result1 <- st_distance(file_settlements_geom, file_motor_geom)
result2 <- st_distance(file_settlements_geom, file_motor_geom)
result3 <- st_distance(file_settlements_geom, file_motor_geom)
# # filter the nearest distance of each road category
result1_min <- apply(result1,1, FUN = min)
result2_min <- apply(result2,1, FUN = min)
result3_min <- apply(result3,1, FUN = min)
# visualise distance output as table.
result1_min_table <- as.data.table(result1_min)
result2_min_table <- as.data.table(result2_min)
result3_min_table <- as.data.table(result3_min)
#rename near column to for the nearest road in M distance
names(result1_min_table)[names(result1_min_table) == "result1_min"] <- "nearest_road_m"
names(result2_min_table)[names(result2_min_table) == "result2_min"] <- "nearest_road_m"
names(result3_min_table)[names(result3_min_table) == "result3_min"] <- "nearest_road_m"
# calculate row number per table
result1_min_table$row_num <- seq.int(nrow(result1_min_table))
result2_min_table$row_num <- seq.int(nrow(result2_min_table))
result3_min_table$row_num <- seq.int(nrow(result3_min_table))
# visualise result
result1_min_table
result2_min_table
result3_min_table
# # calculate distance to nearest road for each road category
result1 <- st_distance(file_settlements_geom, file_motor_geom)
result2 <- st_distance(file_settlements_geom, file_cart_geom)
result3 <- st_distance(file_settlements_geom, file_walk_geom)
# # filter the nearest distance of each road category
result1_min <- apply(result1,1, FUN = min)
result2_min <- apply(result2,1, FUN = min)
result3_min <- apply(result3,1, FUN = min)
# visualise distance output as table.
result1_min_table <- as.data.table(result1_min)
result2_min_table <- as.data.table(result2_min)
result3_min_table <- as.data.table(result3_min)
#rename near column to for the nearest road in M distance
names(result1_min_table)[names(result1_min_table) == "result1_min"] <- "nearest_road_m"
names(result2_min_table)[names(result2_min_table) == "result2_min"] <- "nearest_road_m"
names(result3_min_table)[names(result3_min_table) == "result3_min"] <- "nearest_road_m"
# calculate row number per table
result1_min_table$row_num <- seq.int(nrow(result1_min_table))
result2_min_table$row_num <- seq.int(nrow(result2_min_table))
result3_min_table$row_num <- seq.int(nrow(result3_min_table))
# visualise result
result1_min_table
result2_min_table
result3_min_table
# join the nearest distance with the settlement layer and plot for result1 (motorways)
file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
join_table_distance_l <- inner_join(file_settlements_geom, result1_min_table[ , c("nearest_road_m", "row_num")])
plot(join_table_distance_l$both, join_table_distance_l$nearest_road_m)
# join the nearest distance values with the settlement layer and plot for result2 (cart roads)
file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
join_table_distance_2 <- inner_join(file_settlements_geom, result2_min_table[ , c("nearest_road_m", "row_num")])
plot(join_table_distance_2$both, join_table_distance_2$nearest_road_m)
# join the nearest distance values with the settlement layer and plot for result3 (walking paths)
file_settlements_geom$row_num <- seq.int(nrow(file_settlements_geom))
join_table_distance_3 <- inner_join(file_settlements_geom, result3_min_table[ , c("nearest_road_m", "row_num")])
plot(join_table_distance_3$both, join_table_distance_3$nearest_road_m)
# calculate regression for result1 (motorways)
model1 <- lm(both ~ nearest_road_m, data = join_table_distance_l)
summary(model1)
# calculate regression for result2 (cart roads)
model2 <- lm(both ~ nearest_road_m, data = join_table_distance_2)
summary(model2)
# calculate regression for result3 (walking paths)
model3 <- lm(both ~ nearest_road_m, data = join_table_distance_3)
summary(model3)
# ggplot(data = join_table_distance_l,aes(x.both, y.nearest_road_m)) +
#   stat_summary(fun.data=mean_cl_normal) +
#   geom_smooth(method='lm', formula= y~x)
# read dataset
# df = join_table_distance_l
# Create the model
fit1 <- lm(join_table_distance_l$nearest_road_m ~ join_table_distance_l$both, data=join_table_distance_l)
fit2 <- lm(join_table_distance_2$nearest_road_m ~ join_table_distance_2$both, data=join_table_distance_2)
fit3 <- lm(join_table_distance_3$nearest_road_m ~ join_table_distance_3$both, data=join_table_distance_3)
#plot the results with lm line - Motor way
p1 <- ggplot(join_table_distance_l, aes(nearest_road_m, both))+
geom_point() + stat_smooth(method = "lm", col = "red", se = FALSE) + ggtitle("Nearest Motorway distance") + xlab("road distance (m)") + ylab("Pop. count") + labs(caption = paste("Adj R2 = ",signif(summary(fit1)$adj.r.squared, 5),
"Intercept =",signif(fit1$coef[[1]],5 ),'\n',
" Slope =",signif(fit1$coef[[2]], 5),
" P =",signif(summary(fit1)$coef[2,4], 5)))
#plot the results with lm line - Cart road
p2 <- ggplot(join_table_distance_2, aes(nearest_road_m, both))+
geom_point() + stat_smooth(method = "lm", col = "red", se = FALSE) + ggtitle("Nearest Cartroad distance") + xlab("road distance (m)") + ylab("Pop. count") + labs(caption = paste("Adj R2 = ",signif(summary(fit2)$adj.r.squared, 5),
"Intercept =",signif(fit2$coef[[1]],5 ),'\n',
" Slope =",signif(fit2$coef[[2]], 5),
" P =",signif(summary(fit2)$coef[2,4], 5)))
#plot the results with lm line - Walking path
p3 <- ggplot(join_table_distance_3, aes(nearest_road_m, both))+
geom_point() + stat_smooth(method = "lm", col = "red", se = FALSE) + ggtitle("Nearest Walking path distance") + xlab("road distance (m)") + ylab("Pop. count") + labs(caption = paste("Adj R2 = ",signif(summary(fit3)$adj.r.squared, 5),
"Intercept =",signif(fit3$coef[[1]],5 ),'\n',
" Slope =",signif(fit3$coef[[2]], 5),
" P =",signif(summary(fit3)$coef[2,4], 5)))
#create layout and save as pdf
x <-grid.arrange(p1, p2, p3, nrow = 2, ncol = 2)
ggsave("C:/Users/pietg/Documents/GitHub/hugo-documentation-theme/my_grid2.pdf", x)
remotes::install_github('rstudio/blogdown')
blogdown::new_post(title = "test-website", ext = '.Rmarkdown', subdir = "docs")
blogdown::new_post(title = "Building your website with Hugo and RMarkdown", ext = '.Rmarkdown', subdir = "post")
blogdown:::serve_site()
##this is a test
library(here)
library(DBI)
library(sf)
library(leaflet)
library(ggplot2)
library(tmap)
library(dplyr)
library(nngeo)
here()
